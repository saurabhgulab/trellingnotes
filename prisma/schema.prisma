// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Widget {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
}

model Board {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orgId String
  title String
  imageId String
  imageFullUrl String @db.String(200) 
  imageThumbUrl String @db.String(200) 
  imageUserName String @db.String(200) 
  imageLinkHtml String @db.String(200) 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lists List[]
}

model List{
  id String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title String
  order Int
  cards Card[]
  boardId String
  board Board @relation(fields: [boardId],references: [id],onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([boardId])
}

model Card{
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title String
  order Int
  description String?  @db.String(200)
  listId String @db.String(200)
  list List @relation(fields: [listId],references: [id],onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([listId])
}
enum ACTION{
  CREATE
  UPDATE
  DELETE
}
enum ENTITY_TYPE{
  BOARD
  LIST
  CARD
}

model AuditLog{
  id          String @id  @default(uuid())
  orgId       String
  action      ACTION
  entityId    String
  entityType  ENTITY_TYPE
  entityTitle String
  userId      String
  userImage   String @db.String(200)
  userName    String @db.String(200)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrgLimit{
  id             String @id @default(uuid())
  orgId          String @unique
  count          Int @default(0)
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model orgSubscription{
  id                      String @id @default(uuid())
  orgId                   String @unique
  stripeCustomerId        String? @unique @map(name:"stripe_customer_id")
  stripeSubsriptionId     String? @unique @map(name:"stripe_subscription_id")
  stripePriceId           String? @map(name:"stripe_price_id")
  stripeCurrentPeriodEnd  DateTime? @map(name:"stripe_current_period_end")
}